exit 
ap Geocoder.search(params[:address]).map {|r| r.data}
Geocoder.search(params[:address]).map {|r| r.data}
Geocoder.search(params[:address]).map {|r| r}
Geocoder.search(params[:address])
exit 
  self.class.get('/v1/forecast', @options).parsed_response 
  self.class.get('/v1/forecast', @options)
exit 
@options 
 self.class.get('/v1/forecast', @options)
exit 
ap weather.parsed_response
weather
exit 
get_weather(location)
get_weather(location) 
weather 
    weather = get_weather(location)
exit 
weather 
exit 
 ap get_weather.parsed_response["current_weather"]
 ap get_weather.parsed_response
 get_weather.parsed_response
 get_weather.paresed_response
 get_weather.response
 get_weather
exit 
Net::HTTP.get_response(uri)
       uri = "https://api.open-meteo.com/v1/forecast?latitude=40.71&longitude=-74.01&current_weather=true" 
     HTTParty.get(uri)
 @forecast = Forecast.find_or_initialize_by(zip_code: location[:zip_code])
  location = address_to_zipcode
address_to_zipcode
location 
Location 
exit 
address_to_zipcode[:zipcode]
address_to_zipcode
exit 
address_to_zipcode
exit 
    Geocoder.search(params[:address])
address_to_zipcode
exit 
    Geocoder.search(params[:address]).map do |r| 
        if r.data.dig('address', 'postcode') 
         {   lat: r.data.dig('lat'),
            lng: r.data.dig('lon'),
            zipcode: r.data.dig('address', 'postcode')
            }
        end
    end 
rubocop -A
 Geocoder.search("CHicago, il").map {|r| r.data.dig("address", "postcode")}.compact.first 
 Geocoder.search("CHicago, il").map {|r| r.data.dig("address", "postcode")}.compact
 Geocoder.search("CHicago, il").map {|r| r.data.dig("address", "postcode")}
 Geocoder.search("CHicago, il").map {|r| ap r.data.dig("address", "postcode")}
 Geocoder.search("CHicago, il").map {|r| ap r.data.dig("address", "postcode")}.compact.first
Geocoder.search(params[:address]).map {|r| ap r.data.dig("address", "postcode")}
Geocoder.search(params[:address]).map {|r| ap r.data["address"]}
Geocoder.search(params[:address]).map {|r| ap r.data}
Geocoder.search(params[:address]).map {|r| r.data}
Geocoder.search(params[:address])
exit 
        Geocoder.search(params[:address]).first.data.dig('address')
        Geocoder.search(params[:address]).first.data.dig('address', 'postal_code')
        Geocoder.search(params[:address]).first.dig('address', 'postal_code')
params[:address]         Geocoder.search(params[:address]).first.dig('address', 'postal_code')
params[:address] 
params 
params.permit! 
params 
geo_tag_params
exit 
ap Geocoder.search("881 Park Ave, Brooklyn, NY").first.data
ap Geocoder.search(params[:query]).first.data
ap Geocoder.search(params[:query]).first
exit 
ap Geocoder.search(params[:query]).first
Geocoder.search(params[:query]).first
Geocoder.search(params[:query])
continue
params
